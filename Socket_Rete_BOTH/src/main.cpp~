// Standard include
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <cstdlib>
#include <vector>
#include <eigen3/Eigen/Eigen>

#include <boost/chrono.hpp>
#include <boost/asio.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/asio/serial_port.hpp> 

// Other files include
#include "wireless_communicator.h"
#include "imuboard_communications.h"
#include "qbmove_communications.h"


// GLOBAL FLAGS
bool connected = true;
bool connected_main = true;
int increase_kvib = 0;
bool stop_flag;
bool send_info_flag = false;

char buf[MAXDATASIZE];


//==================== SERIAL COMMUNICATION FUNCTIONS =========================
 boost::asio::serial_port* serialPort_;
 boost::asio::io_service ioService_;
 uint8_t* dataBuffer_; 
	
//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                                              initCOM
//------------------------------------------------------------------------------------------------------------------------------------------
void initCOM() {
	serialPort_ = (new boost::asio::serial_port(ioService_));
	serialPort_->close();
	serialPort_->open("/dev/ttyUSB1");
	serialPort_->set_option(boost::asio::serial_port_base::baud_rate(115200));
	serialPort_->set_option(boost::asio::serial_port_base::character_size(8));
	serialPort_->set_option(boost::asio::serial_port_base::stop_bits(boost::asio::serial_port_base::stop_bits::one));
	serialPort_->set_option(boost::asio::serial_port_base::parity(boost::asio::serial_port_base::parity::none));
	serialPort_->set_option(boost::asio::serial_port_base::flow_control(boost::asio::serial_port_base::flow_control::none));
	
}

//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                                            sendCOM
//------------------------------------------------------------------------------------------------------------------------------------------
void sendCOM() {
	char str[3], str0[3];
	sprintf(str, "%d", 200);
        sprintf(str0, "%d", 0);
	boost::asio::write(*serialPort_,boost::asio::buffer(new char(':'),1));
	boost::asio::write(*serialPort_,boost::asio::buffer(str,3));
	boost::asio::write(*serialPort_,boost::asio::buffer(new char(':'),1));
	boost::asio::write(*serialPort_,boost::asio::buffer(str,3));
	boost::asio::write(*serialPort_,boost::asio::buffer(new char(':'),1));
	boost::asio::write(*serialPort_,boost::asio::buffer(str,3));
	boost::asio::write(*serialPort_,boost::asio::buffer(new char(':'),1));
	boost::asio::write(*serialPort_,boost::asio::buffer(str,3));
	boost::asio::write(*serialPort_,boost::asio::buffer(new char(':'),1));
	boost::asio::write(*serialPort_,boost::asio::buffer(str,3));
	boost::asio::write(*serialPort_,boost::asio::buffer(new char(':'),1));
	boost::asio::write(*serialPort_,boost::asio::buffer(new char('!'),1));
	
}


//=========================== IMU FUNCTIONS ===================================
comm_settings  comm_settings_t_;
int id_ = 1;
float*   imu_values_;
int      n_imu_;
uint8_t* ids_;
uint8_t* imu_table_;
uint8_t* mag_cal_;

Eigen::MatrixXd acc_;
Eigen::VectorXd acc_norm_start_error_;
Eigen::VectorXd acc_norm_current_error_;

Eigen::MatrixXd gyro_;



//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                                      initImuBoard
//------------------------------------------------------------------------------------------------------------------------------------------
void initImuBoard() {
		

	uint8_t aux_string[2000];
	uint8_t PARAM_SLOT_BYTES = 50;
	int num_of_params;
	
	do{
		commGetParamList(&comm_settings_t_ , id_, 0, NULL, 0, 0, aux_string);
	
		num_of_params = aux_string[5];	
	
		//aux_string[6] <-> packet_data[2] on the firmware
		n_imu_ = aux_string[1*PARAM_SLOT_BYTES + 8];
		printf("Number of connected IMUs: %d\n", n_imu_);
	}while(n_imu_!=7);
	
	ids_ = (uint8_t *) calloc(n_imu_, sizeof(uint8_t));
	for (int i=0; i< n_imu_; i++){
		ids_[i] = aux_string[2*PARAM_SLOT_BYTES + 8 + i];
	}
	
	// Retrieve magnetometer calibration parameters
	mag_cal_ = (uint8_t *) calloc(n_imu_, 3*sizeof(uint8_t));
	for (int i=0; i< n_imu_; i++){
		mag_cal_[3*i + 0] = aux_string[3*PARAM_SLOT_BYTES + 8 + 3*i];
		mag_cal_[3*i + 1] = aux_string[3*PARAM_SLOT_BYTES + 9 + 3*i];
		mag_cal_[3*i + 2] = aux_string[3*PARAM_SLOT_BYTES + 10 + 3*i];
		printf("MAG PARAM: %d %d %d\n", mag_cal_[3*i + 0], mag_cal_[3*i + 1], mag_cal_[3*i + 2]);
		
	}
	
	imu_table_ = (uint8_t *) calloc(n_imu_, 5*sizeof(uint8_t));
	for (int i=0; i< n_imu_; i++){
		imu_table_[5*i + 0] = aux_string[4*PARAM_SLOT_BYTES + 8 + 50*i];
		imu_table_[5*i + 1] = aux_string[4*PARAM_SLOT_BYTES + 9 + 50*i];
		imu_table_[5*i + 2] = aux_string[4*PARAM_SLOT_BYTES + 10 + 50*i];
		printf("ID: %d  - %d, %d, %d, %d, %d\n", ids_[i], imu_table_[5*i + 0], imu_table_[5*i + 1], imu_table_[5*i + 2], imu_table_[5*i + 3], imu_table_[5*i + 4]);
		
	}
	
	// Imu values is a 3 sensors x 3 axes x n_imu_ values
	imu_values_ = (float *) calloc(n_imu_, 3*3*sizeof(float));

	acc_.resize(n_imu_,3);
	gyro_.resize(n_imu_,3);
	acc_norm_start_error_.resize(n_imu_);
	acc_norm_current_error_.resize(n_imu_);
}



//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                                    readImuBoard
//------------------------------------------------------------------------------------------------------------------------------------------
void readImuBoard()
{
	commGetImuReadings(&comm_settings_t_ , id_, imu_table_, mag_cal_, n_imu_, imu_values_);
			
	for (int i = 0; i < n_imu_; i++) 
	{
		if (imu_table_[5*i + 0]){
			//printf("Accelerometer\n");
			printf("%d \t %f, %f, %f\n",i, imu_values_[3*3*i], imu_values_[3*3*i+1], imu_values_[3*3*i+2]);
			acc_(i,0) = imu_values_[3*3*i];
			acc_(i,1) = imu_values_[3*3*i+1];
			acc_(i,2) = imu_values_[3*3*i+2];	
		}
		if (imu_table_[5*i + 1]){
			//printf("Gyroscope\n");
			//printf("%f, %f, %f\n", imu_values_[3*3*i+3], imu_values_[3*3*i+4], imu_values_[3*3*i+5]);
			gyro_(i,0) = imu_values_[3*3*i+3];
			gyro_(i,1) = imu_values_[3*3*i+4];
			gyro_(i,2) = imu_values_[3*3*i+5];		
		}
		if (imu_table_[5*i + 2] ){
			//printf("Magnetometer\n");
			//printf("%f, %f, %f\n", imu_values_[3*3*i+6], imu_values_[3*3*i+7], imu_values_[3*3*i+8]);
		}	
		//printf("\n");
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                                              filterAcc
//------------------------------------------------------------------------------------------------------------------------------------------
void filterAcc(char* str_out)
{
	Eigen::VectorXd diff_norm(n_imu_-1);
	char str_send[MAXDATASIZE]; 
      	double touch[6];
	
	Eigen::VectorXd gain(n_imu_-1);
	gain << 1,1,1,1,1,1;
	
	for(int i=0; i<n_imu_-1; i++)
	{
		diff_norm(i) =  std::abs (acc_.row(6).norm() - acc_.row(i).norm() );
		
		if(acc_.row(6).norm() <0.3 || acc_.row(i).norm()<0.3)
			diff_norm(i)=0;					
		
   		std::cout << "diff norm " << i << "   " << acc_.row(6).norm() << " -  " << acc_.row(i).norm() << " = " << diff_norm(i) << std::endl; 
	}
	
	float sum_touch=0;
	for(int i =0; i<n_imu_-1; i++)
	{
		touch[i] = 1000 * diff_norm(i) * gain(i);
		//std::cout << "touch   " << i << "   " <<  touch[i]  << std::endl;
		if(touch[i]>250)
			touch[i]=250;
	}


	create_packet_imu(str_send,  touch);
	std::cout << "str send: " << str_send << std::endl;

	strcpy(str_out, str_send);
}

//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                           	       initialErrorAcc
//------------------------------------------------------------------------------------------------------------------------------------------
void initialErrorAcc()
{
	float initial_error_sum = 0;
	Eigen::Vector3d acc_tmp, acc_reference;
	
	do 
	{
		initImuBoard();
		usleep(2000);
		readImuBoard(); 
		std::cout << "accelerazione ref  " << acc_(6,0) << "  " << acc_(6,0) << "  " << acc_(6,0) <<  "  " << acc_.row(6).norm() << std::endl;
 	}while( acc_(6,0) == 0 );	

	acc_reference = acc_.row(6);
	//acc_reference = acc_reference / acc_reference.norm();  
	// Compute initial errors
	for(int i=0; i<n_imu_-1; i++) 
	{
		acc_tmp = acc_.row(i);
		//float norm_tmp = acc_tmp.norm();
		//acc_tmp = acc_tmp / norm_tmp; 		
		acc_norm_start_error_(i) = (acc_tmp.cross(acc_reference)).norm();

		std::cout << "Start Error " << i << "   " <<  acc_norm_start_error_(i)  << std::endl;
		initial_error_sum = initial_error_sum + acc_norm_start_error_(i);
	}
	std::cout << "Initial Error Sum" << "   " <<  initial_error_sum  << std::endl;
	
	getchar();
}



//------------------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                                           filterAccOrientation
//------------------------------------------------------------------------------------------------------------------------------------------
void filterAccOrientation(char* str_out)
{
	Eigen::VectorXd diff_norm(n_imu_-1);
	Eigen::VectorXd gain(n_imu_-1);
	Eigen::Vector3d acc_tmp, acc_reference;
	double touch[6];
	char str_send[MAXDATASIZE];

	gain << 1,1,1,1.3,0.1,0.1;
	acc_reference = acc_.row(6);
	//acc_reference = acc_reference / acc_reference.norm();  
	// Compute current errors	
	for(int i=0; i<n_imu_-1; i++) 
	{
		acc_tmp = acc_.row(i) ;
		//float norm_tmp = acc_tmp.norm();
		//acc_tmp = acc_tmp / norm_tmp; 		
		acc_norm_current_error_(i) = (acc_tmp.cross(acc_reference)).norm();
		std::cout << "acc  " << i << "\n " <<  acc_tmp  << std::endl;
	}	

	for(int i=0; i<n_imu_-1; i++)
	{
		diff_norm(i) =  std::abs ( acc_norm_current_error_(i) - acc_norm_start_error_(i) );		
	
		std::cout << "norm  acc " << i << " " <<  acc_norm_current_error_(i)  << std::endl;	 	
		std::cout << "norm  ref  " << i << " " <<  acc_norm_start_error_(i)  << std::endl;	 	
		std::cout << "norm  dif  " << i << " " <<  diff_norm(i)  << std::endl;	 	
		//getchar();	
	}

	for(int i =0; i<n_imu_-1; i++)
	{
		touch[i] = 1000 * diff_norm(i) * gain(i);
		////std::cout << "touch   " << i << "   " <<  touch[i]  << std::endl;
		if(touch[i]>250) 
			touch[i]=250; 
		if(touch[i]<80) 
			touch[i]=0;  
	}

	create_packet_imu(str_send,  touch);
	std::cout << "str send: " << str_send << std::endl;

	strcpy(str_out, str_send);
}




//================================ MAIN ========================================
int main(int argc, char** argv){


	/*** COM SETUP ***/
	//std::cout << "COM START\n\n\n" << std::endl;	
	//initCOM();

	/*** IMU SETUP ***/
	std::cout << "IMU ACQUISITION START\n\n\n" << std::endl;
	openRS485(&comm_settings_t_, "/dev/ttyUSB0", 2000000 );
	initImuBoard();
	sleep(1);
	initialErrorAcc();
	

	/*** wifi CONNECTION SETUP ***/
        std::cout << "wifi CONNECTION START\n\n\n" << std::endl;	
	char ip_pc[30] = "192.168.1.50";
	if (initialize_connection(ip_pc) ){
	cout << "Error on connection creation" << endl;
	return 1;
	}
	receive_data();
	std::cout << "Init: " << buf << std::endl;	
	

	/***  LOOP ***/
	while(1)
	{               
		readImuBoard();
                //filterAcc(buf);
		filterAccOrientation(buf);
		send_data(buf);      

		//if(wifi_event() )
		//	initialErrorAcc();          

		//usleep(2000);
	}	

	
        closeRS485(&comm_settings_t_);
    	
    return 0;
}
